---
import {
  differenceInCalendarDays,
  eachDayOfInterval,
  formatISO,
  getDay,
  nextDay,
  parseISO,
  subWeeks,
  getYear,
  getMonth,
  isValid,
} from 'date-fns'
import type {
  WeekdayIndex,
  GitHubActivityDay,
  GitHubActivityWeek,
  GitHubActivityMonthLabel,
} from '~/types'

interface Props {
  username: string
  year?: number
}

function range(n: number) {
  return [...Array(n).keys()]
}

async function fetchDataFromGitHub(username: string, year: number) {
  const token = import.meta.env.GITHUB_TOKEN // guarda el token en variables de entorno

  // Rango de fechas: desde el 1 de enero hasta el 31 de diciembre
  const from = `${year}-01-01T00:00:00Z`
  const to = `${year}-12-31T23:59:59Z`

  const query = `
    query ($username: String!, $from: DateTime!, $to: DateTime!) {
      user(login: $username) {
        contributionsCollection(from: $from, to: $to) {
          contributionCalendar {
            totalContributions
            weeks {
              contributionDays {
                date
                contributionCount
                color
              }
            }
          }
        }
      }
    }
  `

  const response = await fetch("https://api.github.com/graphql", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      query,
      variables: { username, from, to },
    }),
  })

  const { data, errors } = await response.json()
  if (errors) {
    console.error(errors)
    throw new Error("GraphQL query failed")
  }

  const calendar = data.user.contributionsCollection.contributionCalendar
  const contributions: GitHubActivityDay[] = []

  for (const week of calendar.weeks) {
    for (const day of week.contributionDays) {
      // Mapear contribuciones a niveles (0-4) basado en la cantidad
      let level: 0 | 1 | 2 | 3 | 4 = 0
      if (day.contributionCount > 0) {
        if (day.contributionCount <= 3) level = 1
        else if (day.contributionCount <= 6) level = 2
        else if (day.contributionCount <= 10) level = 3
        else level = 4
      }
      
      contributions.push({
        date: day.date,
        count: day.contributionCount,
        level: level,
      })
    }
  }

  return {
    contributions,
    total: {
      [String(year)]: calendar.totalContributions,
    },
  }
}

function calcColorScale([start, end]: [string, string], steps: number): Array<string> {
  return range(steps).map((i) => {
    switch (i) {
      case 0:
        return start
      case steps - 1:
        return end
      default: {
        const pos = (i / (steps - 1)) * 100
        return `color-mix(in oklab, ${end} ${parseFloat(pos.toFixed(2))}%, ${start})`
      }
    }
  })
}

function fillHoles(activities: Array<GitHubActivityDay>): Array<GitHubActivityDay> {
  const calendar = new Map<string, GitHubActivityDay>(activities.map((a) => [a.date, a]))
  const firstActivity = activities[0] as GitHubActivityDay
  const lastActivity = activities[activities.length - 1] as GitHubActivityDay

  return eachDayOfInterval({
    start: parseISO(firstActivity.date),
    end: parseISO(lastActivity.date),
  }).map((day) => {
    const date = formatISO(day, { representation: 'date' })
    if (calendar.has(date)) {
      return calendar.get(date) as GitHubActivityDay
    }
    return {
      date,
      count: 0,
      level: 0,
    }
  })
}

function groupByWeeks(
  activities: Array<GitHubActivityDay>,
  weekStart: WeekdayIndex = 0, // 0 = Sunday
): Array<GitHubActivityWeek> {
  const normalizedActivities = fillHoles(activities)
  // Determine the first date of the calendar. If the first date is not the
  // passed weekday, the respective weekday one week earlier is used.
  const firstActivity = normalizedActivities[0] as GitHubActivityDay
  const firstDate = parseISO(firstActivity.date)
  const firstCalendarDate =
    getDay(firstDate) === weekStart
      ? firstDate
      : subWeeks(nextDay(firstDate, weekStart), 1)
  // To correctly group activities by week, it is necessary to left-pad the list
  // because the first date might not be set start weekday.
  const paddedActivities = [
    ...(Array(differenceInCalendarDays(firstDate, firstCalendarDate)).fill(
      undefined,
    ) as Array<GitHubActivityDay>),
    ...normalizedActivities,
  ]
  const numberOfWeeks = Math.ceil(paddedActivities.length / 7)

  // Finally, group activities by week
  return [...Array(numberOfWeeks).keys()].map((weekIndex) =>
    paddedActivities.slice(weekIndex * 7, weekIndex * 7 + 7),
  )
}

function getMonthLabels(
  weeks: Array<GitHubActivityWeek>,
  monthNames: Array<string>,
): Array<GitHubActivityMonthLabel> {
  return weeks
    .reduce<Array<GitHubActivityMonthLabel>>((labels, week, weekIndex) => {
      const firstActivity = week.find((activity) => activity !== undefined)
      if (!firstActivity) {
        throw new Error(`Unexpected error: Week ${weekIndex + 1} is empty.`)
      }
      const month = monthNames[getMonth(parseISO(firstActivity.date))]
      if (!month) {
        const monthName = new Date(firstActivity.date).toLocaleString('en-US', {
          month: 'short',
        })
        throw new Error(`Unexpected error: undefined month label for ${monthName}.`)
      }
      const prevLabel = labels[labels.length - 1]
      if (weekIndex === 0 || !prevLabel || prevLabel.label !== month) {
        return [...labels, { weekIndex, label: month }]
      }
      return labels
    }, [])
    .filter(({ weekIndex }, index, labels) => {
      const minWeeks = 3
      // Skip the first month label if there is not enough space to the next one.
      if (index === 0) {
        return labels[1] && labels[1].weekIndex - weekIndex >= minWeeks
      }
      // Skip the last month label if there is not enough data in that month
      if (index === labels.length - 1) {
        return weeks.slice(weekIndex).length >= minWeeks
      }
      return true
    })
}

const { username, year = 'last' } = Astro.props

const data = await fetchDataFromGitHub(username, year === 'last' ? new Date().getFullYear() : year)

// Colorscale que se adapta mejor al tema
const themeFromColorscheme: [string, string] = [
  'var(--theme-background)',
  'var(--theme-accent)',
]

const maxLevel = 4
const blockMargin = 4
const labelMargin = 8
const blockRadius = 2
const blockSize = 12
const fontSize = 14
const hideColorLegend = false
const hideMonthLabels = false
const hideTotalCount = false
const weekStart = 0 // 0 = Sunday, 1 = Monday, etc.

const colorScale = calcColorScale(themeFromColorscheme, maxLevel + 1)
const allActivities = data.contributions || []

// Filtrar actividades dinámicamente desde diciembre del año anterior hasta el mes actual
const currentDate = new Date()
const currentYear = currentDate.getFullYear()
const currentMonth = currentDate.getMonth() // 0 = enero, 11 = diciembre

const filteredActivities = allActivities.filter((activity) => {
  const date = parseISO(activity.date)
  const activityYear = getYear(date)
  const activityMonth = getMonth(date)
  
  // Si es el año actual: incluir desde enero hasta el mes actual
  if (activityYear === currentYear) {
    return activityMonth <= currentMonth
  }
  
  // Si es el año anterior: incluir solo diciembre
  if (activityYear === currentYear - 1) {
    return activityMonth === 11 // diciembre
  }
  
  // Excluir otros años
  return false
})

// Calcular el total solo para el período filtrado (diciembre del año anterior hasta el mes actual)
const totalCount = filteredActivities.reduce((sum, activity) => sum + activity.count, 0)

const activities = filteredActivities

// Handle case where there are no activities (e.g., API failure)
let weeks: Array<GitHubActivityWeek>
let labels: {
  months: string[]
  totalCount: string
  legend: { less: string; more: string }
}
let labelHeight: number
let width: number
let height: number
let activityYear: number

if (activities.length === 0) {
  // Return empty calendar
  weeks = []
  labels = {
    months: [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
    ],
    totalCount: 'No hay datos disponibles',
    legend: {
      less: 'Less',
      more: 'More',
    },
  }
  labelHeight = hideMonthLabels ? 0 : fontSize + labelMargin
  width = 0
  height = labelHeight
  activityYear = currentYear
} else {
  const firstActivity = activities[0]
  activityYear = getYear(parseISO(firstActivity.date))
  weeks = groupByWeeks(activities, weekStart)
  labels = {
    months: [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ],
    totalCount: `{{count}} contribuciones desde diciembre ${currentYear - 1} hasta ${new Date().toLocaleString('es-ES', { month: 'long' })} ${currentYear}`,
    legend: {
      less: 'Less',
      more: 'More',
    },
  }
  labelHeight = hideMonthLabels ? 0 : fontSize + labelMargin
  width = weeks.length * (blockSize + blockMargin) - blockMargin
  height = labelHeight + (blockSize + blockMargin) * 7 - blockMargin
}
---

<article
  id="github-activity-calendar"
  class="w-max max-w-full flex flex-col gap-2 text-sm justify-center items-center"
>
  <div
    class="max-w-full overflow-x-auto pt-0.5"
    style={{
      // Don't cover the calendar with the scrollbar.
      scrollbarGutter: 'stable',
    }}
  >
    <svg
      class="block visible"
      width={width}
      height={height}
      viewBox={`0 0 ${width} ${height}`}
    >
      {
        !hideMonthLabels && (
          <g>
            {getMonthLabels(weeks, labels.months).map(({ label, weekIndex }) => (
              <text
                x={(blockSize + blockMargin) * weekIndex}
                y={0}
                dominant-baseline="hanging"
                fill="currentColor"
              >
                {label}
              </text>
            ))}
          </g>
        )
      }
      {
        weeks.map((week, weekIndex) => (
          <g transform={`translate(${(blockSize + blockMargin) * weekIndex}, 0)`}>
            {week.map((activity, dayIndex) => {
              if (!activity) return null
              return (
                <rect
                  class="stroke-foreground/10"
                  x={0}
                  y={labelHeight + (blockSize + blockMargin) * dayIndex}
                  width={blockSize}
                  height={blockSize}
                  rx={blockRadius}
                  ry={blockRadius}
                  fill={colorScale[activity.level]}
                  data-date={activity.date}
                  data-level={activity.level}
                />
              )
            })}
          </g>
        ))
      }
    </svg>
  </div>
  {
    !(hideTotalCount && hideColorLegend) && (
      <footer class="flex flex-col sm:flex-row sm:justify-between gap-x-1 gap-y-2">
        {!hideTotalCount && (
          <div>
            {labels.totalCount
              ? labels.totalCount
                  .replace('{{count}}', String(totalCount))
                  .replace('{{year}}', String(activityYear))
              : `${totalCount} activities in ${activityYear}`}
          </div>
        )}
        {!hideColorLegend && (
          <div class="flex items-center gap-[3px]">
            <span class="mr-1.5">{labels.legend.less}</span>
            {range(maxLevel + 1).map((level) => (
              <svg width={blockSize} height={blockSize}>
                <rect
                  class="stroke-foreground/10"
                  width={blockSize}
                  height={blockSize}
                  fill={colorScale[level]}
                  rx={blockRadius}
                  ry={blockRadius}
                />
              </svg>
            ))}
            <span class="ml-1.5">{labels.legend.more}</span>
          </div>
        )}
      </footer>
    )
  }
</article>

<style>
  /* Mejorar la apariencia del calendario de GitHub */
  #github-activity-calendar {
    font-family: var(--theme-font), monospace;
  }
  
  #github-activity-calendar svg {
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }
  
  #github-activity-calendar rect {
    transition: all 0.2s ease;
  }
  
  #github-activity-calendar rect:hover {
    stroke: var(--theme-accent) !important;
    stroke-width: 1px;
    filter: brightness(1.1);
  }
  
  /* Mejorar contraste en modo oscuro */
  @media (prefers-color-scheme: dark) {
    #github-activity-calendar rect {
      stroke: rgba(255, 255, 255, 0.1) !important;
    }
  }
  
  /* Mejorar contraste en modo claro */
  @media (prefers-color-scheme: light) {
    #github-activity-calendar rect {
      stroke: rgba(0, 0, 0, 0.1) !important;
    }
  }
</style>
